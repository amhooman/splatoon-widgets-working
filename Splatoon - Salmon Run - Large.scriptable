{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "orange",
    "glyph" : "brush"
  },
  "name" : "Splatoon - Salmon Run - Large",
  "script" : "\/\/ Variables used by Scriptable.\n\/\/ These must be at the very top of the file. Do not edit.\n\/\/ icon-color: orange; icon-glyph: magic;\n\/\/ Variables used by Scriptable.\n\/\/ These must be at the very top of the file. Do not edit.\n\/\/ icon-color: orange; icon-glyph: magic;\n\/\/ Variables used by Scriptable.\n\/\/ These must be at the very top of the file. Do not edit.\n\/\/ icon-color: orange; icon-glyph: magic;\n\/\/ Variables used by Scriptable.\n\/\/ These must be at the very top of the file. Do not edit.\n\/\/ icon-color: orange; icon-glyph: brush;\n\/\/ Thank you for downloading this script. To get started with it make sure\n\/\/ you are running Scriptable 1.5.1, after that add the Scriptable widget\n\/\/ to your Home Screen and select this script in the editing panel.\n\n\/\/ Feel free to make changes to this script as you need it. Please don't\n\/\/ redistribute without permission. Instead submit a change request to the\n\/\/ Github project (https:\/\/github.com\/trevormkay\/splatoon-widgets) so everyone\n\/\/ can benefit.\n\n\/\/ All data comes from https:\/\/splatoon2.ink\/ and Splatoon content Copyright\n\/\/ 2015 Nintendo. No copyright or trademark infringement is intended in using\n\/\/ Splatoon content.\n\n\/\/ Salmon Run Widget made by Görkem Güclü (https:\/\/twitter.com\/goerkemg)\n\nlet json = await loadJson()\nlet merchandiseJson = await loadMerchandiseJson()\nlet widget = await createWidget(json)\n\n\/\/ Check if the script is running in a widget. If not, show a preview of the widget to easier debug it\nif (!config.runsInWidget) {\n  await widget.presentLarge()\n}\n\n\/\/ Tell the system to show the widget\nScript.setWidget(widget)\nScript.complete()\n\n\/\/ Generate widget\nasync function createWidget(json) {\n  \n    let dateFormatter = new DateFormatter()\n    dateFormatter.useShortDateStyle()\n    dateFormatter.useShortTimeStyle()\n\n    let bgColor = \"#ff5600\"\n        \n    \/\/ Create widget frame\n    let w = new ListWidget()\n    w.setPadding(10, 10, 10, 10)\n    w.backgroundColor = new Color(bgColor)\n\n    \/\/ Display spots image as the background\n    let bgImage = new Request('https:\/\/splatoon2.ink\/assets\/img\/bg-spots.fc2fe88f.png')\n    let retrvBgImage = await bgImage.loadImage()\n    w.backgroundImage = retrvBgImage\n\n\n    \/\/\n    \/\/ TITLE\n    \/\/\n\n    let titleStack = w.addStack()\n    titleStack.spacing = 5\n    \n    \/\/ Logo\n    let logoReq = new Request('https:\/\/splatoon2.ink\/assets\/img\/mr-grizz.a87af81b.png')\n    let logoImage = await logoReq.loadImage()\n    let logo = titleStack.addImage(logoImage)\n    logo.imageSize = new Size(30, 30)\n\n    \/\/ Salmon Run\n    let modeTxt = titleStack.addText('Salmon Run')\n    modeTxt.font = Font.boldRoundedSystemFont(30)\n    modeTxt.textColor = Color.white()\n\n    \/\/ Current gear image\n    let gear = merchandiseJson[\"coop\"][\"reward_gear\"][\"gear\"]\n    let gearImageUrl = 'https:\/\/splatoon2.ink\/assets\/splatnet'+gear.image\n    let gearImageReq = new Request(gearImageUrl)\n    let gearImage = await gearImageReq.loadImage()\n\n    titleStack.addSpacer()\n    \n    let gearContainer = titleStack.addStack()\n    gearContainer.backgroundColor = new Color(\"FFFFFF55\")\n    gearContainer.setPadding(2,2,2,2)\n    gearContainer.cornerRadius = 4\n    gearContainer.centerAlignContent()\n    let gearImageDisplay = gearContainer.addImage(gearImage)\n    gearImageDisplay.imageSize = new Size(26, 26)\n\n    w.addSpacer()\n    \n    \/\/\n    \/\/ STAGES\n    \/\/\n    let schedulesStack = w.addStack()\n    schedulesStack.layoutVertically()\n    schedulesStack.spacing = 5\n    schedulesStack.backgroundColor = new Color(\"00000055\")\n    schedulesStack.cornerRadius = 14\n    schedulesStack.setPadding(10, 10, 10, 10)\n\n    \n    let now = Date.now()\n\n    let schedules = json[\"details\"]\n      var stageIndex = 0\n    for (i=0; i<schedules.length; i++) {\n\n        let schedule = schedules[i]\n\n        \/\/ Time display\n        let startDate = new Date(schedule.start_time * 1000)\n        let endDate = new Date(schedule.end_time * 1000)\n        let startDateText = dateFormatter.string(startDate)\n        let endDateText = dateFormatter.string(endDate)\n        let isOpen = (schedule.start_time * 1000) < now && now < (schedule.end_time * 1000)\n        let isSoon = now < (schedule.start_time * 1000)\n\n        if (i == 0 && (isOpen || isSoon)) {\n            let relativeDateStack = schedulesStack.addStack()    \/\/ container\n            relativeDateStack.centerAlignContent()\n            relativeDateStack.spacing = 5\n            let relativeDateContainer = relativeDateStack.addStack()    \/\/ container\n            relativeDateContainer.backgroundColor = Color.black()\n            relativeDateContainer.cornerRadius = 4\n            relativeDateContainer.setPadding(2, 4, 2, 4)\n            let text = isSoon ? 'Soon' : 'Open'\n            let relativeDateTxt = relativeDateContainer.addText(text)\n            relativeDateTxt.font = Font.boldRoundedSystemFont(14)\n            relativeDateTxt.textColor = Color.white()\n\n            if (isOpen) {\n                let relativeStartDateDisplay = relativeDateStack.addDate(endDate)\n                relativeStartDateDisplay.font = Font.boldRoundedSystemFont(10)\n                relativeStartDateDisplay.textColor = Color.white()\n                relativeStartDateDisplay.lineLimit = 1\n                relativeStartDateDisplay.minimumScaleFactor = 0.5\n                relativeStartDateDisplay.applyRelativeStyle()\n            }\n        }\n\n        let timeStack = schedulesStack.addStack()\n        timeStack.centerAlignContent()\n        let stageDateTxt = timeStack.addText(startDateText + ' - ' + endDateText)\n        stageDateTxt.lineLimit = 1\n        stageDateTxt.font = Font.boldRoundedSystemFont(12)\n        stageDateTxt.textColor = Color.white()\n        stageDateTxt.minimumScaleFactor = 0.5\n\n        if (isSoon) {\n            timeStack.addSpacer()\n            \n            let relativeStartDateDisplay = timeStack.addDate(startDate)\n            relativeStartDateDisplay.font = Font.boldRoundedSystemFont(9)\n            relativeStartDateDisplay.textColor = Color.white()\n            relativeStartDateDisplay.lineLimit = 1\n            relativeStartDateDisplay.minimumScaleFactor = 0.4\n            relativeStartDateDisplay.applyRelativeStyle()\n        }\n\n      \n        if(schedule.stage != null) {\n            \/\/ schedule has stage\n\n            const stage = schedule.stage\n            const stageName = stage.name\n            const stageImgUrl = stage.image\n\n            \/\/ Stage 1\n            let stageStack = schedulesStack.addStack()\n            stageStack.spacing = 5\n\n            \/\/ Display Stage 1 image\n            let stageReq = new Request('https:\/\/splatoon2.ink\/assets\/splatnet' + stageImgUrl)\n            let stageImage = await stageReq.loadImage()\n            let stageImageDisplay = stageStack.addImage(stageImage)\n            stageImageDisplay.cornerRadius = 10\n            stageImageDisplay.imageSize = new Size(100, 56)\n\n            \/\/ Stage info\n            let stageInfoStack = stageStack.addStack()\n            stageInfoStack.layoutVertically()\n\n            let titleStack = stageInfoStack.addStack()\n            titleStack.spacing = 5\n\n            let stageNameTxt = titleStack.addText(stageName)\n            stageNameTxt.font = Font.boldRoundedSystemFont(18)\n            stageNameTxt.textColor = Color.white()\n\n            if (schedule.weapons != null) {\n\n                let stageWeaponsStack = stageInfoStack.addStack()\n                stageWeaponsStack.spacing = 5\n                let stageWeapons = schedule.weapons\n                for (j=0; j<stageWeapons.length; j++) {\n                  let weaponDetails = stageWeapons[j]\n                  let weapon = weaponDetails.weapon != null ? weaponDetails.weapon : (weaponDetails.coop_special_weapon != null ? weaponDetails.coop_special_weapon : null)\n                    if (weapon != null) {\n                        var weaponURL = 'https:\/\/splatoon2.ink\/assets\/splatnet' + weapon.image\n                        if (weapon.image.startsWith(\"assets\")) {\n                            weaponURL = 'https:\/\/splatoon2.ink\/' + weapon.image\n                        }\n                        let weaponReq = new Request(weaponURL)\n                        let weaponImage = await weaponReq.loadImage()\n                        weaponImageDisplay = stageWeaponsStack.addImage(weaponImage)\n                        weaponImageDisplay.imageSize = new Size(32, 32)\n                    }\n                }\n\n            }\n\n        }\n        stageIndex = i\n    }\n    stageIndex++\n\n    let otherSchedules = json[\"schedules\"]\n    for (i=stageIndex; i<otherSchedules.length; i++) {\n        let otherSchedule = otherSchedules[i]\n        \/\/console.log(otherSchedule)\n        \n        \/\/ Time display\n        let startDate = new Date(otherSchedule.start_time * 1000)\n        let endDate = new Date(otherSchedule.end_time * 1000)\n        let startDateText = dateFormatter.string(startDate)\n        let endDateText = dateFormatter.string(endDate)\n\n        let timeStack = schedulesStack.addStack()\n        let stageDateTxt = timeStack.addText(startDateText + ' - ' + endDateText)\n        stageDateTxt.font = Font.boldRoundedSystemFont(12)\n        stageDateTxt.textColor = Color.white()\n    }\n\n    return w\n}\n\n\/\/Load the Splatoon 2 Schedule JSON\nasync function loadJson() {\n    let url = \"https:\/\/splatoon2.ink\/data\/coop-schedules.json\"\n    let req = new Request(url)\n    let textres = await req.loadString()\n    let json = JSON.parse(textres)\n    return json\n}\n\n\n\/\/Load the Splatoon 2 Salmon Run Timeline JSON\nasync function loadMerchandiseJson() {\n    let url = \"https:\/\/splatoon2.ink\/data\/timeline.json\"\n    let req = new Request(url)\n    let textres = await req.loadString()\n    let json = JSON.parse(textres)\n    return json\n}\n\n",
  "share_sheet_inputs" : [

  ]
}