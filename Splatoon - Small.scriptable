{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "pink",
    "glyph" : "brush"
  },
  "name" : "Splatoon - Small",
  "script" : "\/\/ Thank you for downloading this script. To get started with it make sure\n\/\/ you are running Scriptable 1.5.1, after that add the Scriptable widget\n\/\/ to your Home Screen and select this script in the editing panel. You will\n\/\/ need to put in \"regular\", \"ranked\", or \"league\" in the parameter field to\n\/\/ select which mode you want to display.\n\n\/\/ Feel free to make changes to this script as you need it. Please don't\n\/\/ redistribute without permission. Instead submit a change request to the\n\/\/ Github project (https:\/\/github.com\/trevormkay\/splatoon-widgets) so everyone\n\/\/ can benefit.\n\n\/\/ All data comes from https:\/\/splatoon2.ink\/ and Splatoon content Copyright\n\/\/ 2015 Nintendo. No copyright or trademark infringement is intended in using\n\/\/ Splatoon content.\n\nlet json = await loadJson()\nlet widget = await createWidget(json)\n\n\/\/ Check if the script is running in a widget. If not, show a preview of the widget to easier debug it\nif (!config.runsInWidget) {\n  await widget.presentSmall()\n}\n\n\/\/ Tell the system to show the widget\nScript.setWidget(widget)\nScript.complete()\n\n\/\/ Generate widget\nasync function createWidget(json) {\n  \/\/ Grab the parameter when setting the widget on the Home Screen\n  var parameter = args.widgetParameter;\n  \n  \/\/ Makes the parameter for ranked mode easier to explain\n  if (parameter == \"ranked\") {parameter = \"gachi\"}\n  \n  \/\/ Handles running the widget inside Scriptable for debugging\n  if (parameter == null) {parameter = \"gachi\"}\n  \n  \/\/ Mode Colors \n  var modeColor = \"#000000\"\n  if (parameter == \"regular\") {modeColor = \"#19D719\"}\n  if (parameter == \"gachi\") {modeColor = \"#F54910\"}\n  if (parameter == \"league\") {modeColor = \"#F02D7D\"}\n  \n  \/\/ Current mode data\n  const { gachi, regular, league } = json\n  let mode1 = json[parameter][0]\n  const stageA = mode1.stage_a\n  const stageB = mode1.stage_b\n  const modeA = mode1.rule\n  let imgStageA = stageA.image\n  let imgStageB = stageB.image\n  \n  \/\/ Next mode data  \n  let mode2 = json[parameter][1]\n  const modeB = mode2.rule\n  \n  \/\/ Time display\n  let unix_timestamp = mode2.start_time\n  var date = new Date(unix_timestamp * 1000)\n  var hours = date.getHours();\n  if (hours == 0) {hours = \"12 AM\"}\n  if (hours <= 11) {hours = hours + \" AM\"}\n  if (hours == 12) {hours = hours + \" PM\"}\n  if (hours >= 13) {hours = hours - 12 + \" PM\"}\n  \n  \/\/ Create widget frame\n  let w = new ListWidget()\n  w.setPadding(10, 10, 10, 10)\n  \n  \/\/ Display Stage 1 image as the background\n  let urlStageA = new Request('https:\/\/splatoon2.ink\/assets\/splatnet' + imgStageA)\n  let retrvImgStageA = await urlStageA.loadImage()\n  w.backgroundImage = retrvImgStageA\n  \n  \/\/ Gradient overlay\n  let gradient = new LinearGradient()\n  gradient.locations = [0, 1]\n  gradient.colors = [\n    new Color(\"00000000\"),\n    new Color(\"000000\")\n  ]\n  w.backgroundGradient = gradient\n  \n  \/\/ Mode logo\n  let imgReqMode = new Request('https:\/\/cdn.toast-studio.com\/splatoon\/' + parameter + '.png')\n  let imgMode = await imgReqMode.loadImage()\n  let logo = w.addImage(imgMode)\n  logo.rightAlignImage()\n  logo.imageSize = new Size(40, 40)\n  \n  w.addSpacer()\n  \n  \/\/ Current mode text\n  let modeTxt = w.addText(modeA.name)\n  modeTxt.font = Font.boldRoundedSystemFont(22)\n  modeTxt.textColor = new Color(modeColor, 1)\n  modeTxt.minimumScaleFactor = 0.3\n  \n  \/\/ Next mode text\n  if (parameter == \"regular\") {\n    let mode2Txt = w.addText(\"Changes at \" + hours)\n    mode2Txt.font = Font.regularRoundedSystemFont(12)\n    mode2Txt.textColor = Color.white()\n    mode2Txt.minimumScaleFactor = 0.3\n  } else {\n    let mode2Txt = w.addText(modeB.name + \" at \" + hours)\n    mode2Txt.font = Font.regularRoundedSystemFont(12)\n    mode2Txt.textColor = Color.white()\n    mode2Txt.minimumScaleFactor = 0.3\n  }\n  \n  return w\n}\n\n\/\/Load the Splatoon 2 Schedule JSON\nasync function loadJson() {\n  let url = \"https:\/\/splatoon2.ink\/data\/schedules.json\"\n  let req = new Request(url)\n  let textres = await req.loadString()\n  let json = JSON.parse(textres)\n  return json\n}\n\n\n",
  "share_sheet_inputs" : [

  ]
}